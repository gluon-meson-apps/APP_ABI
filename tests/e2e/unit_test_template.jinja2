import json

import asyncio

scenario = "{{ scenario }}"
use_case = "{{ use_case }}"
params = {
{%- for key, value in params.items() %}
    "{{ key }}": {{ value }},
{%- endfor %}
}

def construct_chat_message():
    from loguru import logger
    from gluon_meson_sdk.models.abstract_models.chat_message_preparation import ChatMessagePreparation
    {% for data in data_list %}
        {%- for key, value in data["kwargs"].items() %}
    {{ key }}="""{{ value }}"""
        {%- endfor %}

    {% endfor %}

    chat_message_preparation = ChatMessagePreparation()
    first_prompt = """{{ data_list[0]["template"] }}"""

    {%- for data in data_list %}
        {%- set template_name = 'template' ~ loop.index %}
    chat_message_preparation.add_message(
        '{{ data['role'] }}',
        {%- if loop.index != 1 %}
        """{{ data["template"] }}""",
        {%- else %}
        first_prompt,
        {%- endif %}
        {%- for key, value in data["kwargs"].items() %}
            {{ key }}={{ key }},
        {%- endfor %}
        )
    {%- endfor %}

    chat_message_preparation.log(logger)
    chat_params = chat_message_preparation.to_chat_params()
    return chat_params, first_prompt



async def main():
    import os
    os.environ["GLUON_MESON_CONTROL_CENTER_ENDPOINT"] = "http://bj-3090.private.gluon-meson.tech:18000"
    from gluon_meson_sdk.models.scenario_model_registry.base import DefaultScenarioModelRegistryCenter


    scenario_model_registry = DefaultScenarioModelRegistryCenter()
    chat_model = scenario_model_registry.get_model('{{ scenario }}')

    chat_params, _ = construct_chat_message()

    result = (await chat_model.achat(**chat_params, **params)).response
    print(result)

    return use_case, scenario, chat_params["text"], json.dumps(params), result, ""


expected = """{{ expected }}"""
previous_output = """{{ output }}"""

def get_params():
    from tests.e2e.template_test_from_log import check_json_result
    chat_params, prompt_template = construct_chat_message()
    result = ""
    if params['jsonable']:
        result = 'pass' if check_json_result(expected, previous_output) else 'fail'
    return use_case, scenario, prompt_template, chat_params["text"], json.dumps(params), previous_output, result

if __name__ == '__main__':
    asyncio.run(main())
