import os
from pathlib import Path

from tests.e2e.e2e_util import standardize_session_name
from utils.utils import format_jinja_template



# params_list = inner_df['params'].apply(process_one_params).tolist()
def generate_one_unit_test(session_name, data_list, params, output, scenario, file_name, generate_dir_name='generated'):
    session_name = standardize_session_name(session_name)
    cur_dir = os.path.dirname(os.path.abspath(__file__))
    with open(f"{cur_dir}/unit_test_template.jinja2", "r") as rf:
        template = rf.read()
        Path(f"{cur_dir}/{generate_dir_name}/{session_name}/generated_unit_test").mkdir(parents=True, exist_ok=True)
        with open(f"{cur_dir}/{generate_dir_name}/{session_name}/generated_unit_test/{file_name}_unit.py", "w") as wf:
            wf.write(format_jinja_template(
                template,
                data_list=data_list,
                params=params,
                output=output,
                scenario=scenario,
                use_case=session_name,
            ))


if __name__ == '__main__':
    data_list = [
        {"role": "system", "kwargs": {
            "search_tools": "- description: \"\\u667A\\u80FD\\u673A\\u5668\\u4EBA\\u6807\\u4E66\\uFF0C\\u4E0E\\u4F20\\u7EDF\\\n    \\u673A\\u5668\\u4EBA\\u7684\\u5BF9\\u6BD4\"\n  fields:\n  - description: the id of the search result\n    name: id\n    type: STRING\n  - description: the content of the system file\n    name: text\n    type: STRING\n  name: chatbot_vectors\n  type: VECTOR_STORE\n- description: standard_pricing_check system contains infos about product pricing\n  fields:\n  - description: the confidence of the search result\n    name: _score\n    type: FLOAT\n  - description: the country of the product\n    name: country\n    type: STRING\n  - description: 'the type or product group of the product; available values: Payments,\n      Liquidity, Digital Channel, Account Services'\n    name: product_group\n    type: ENUM\n  - description: the product name\n    name: product\n    type: STRING\n  - description: the unit rate of the product\n    name: unit_rate\n    type: FLOAT\n  - description: the currency of the price\n    name: charge_currency\n    type: STRING\n  name: standard_pricing\n  type: RDMS\n- description: hsbc_topic_for_intent system contains infos about intent examples\n  fields:\n  - description: the confidence of the search result\n    name: meta__score\n    type: FLOAT\n  - description: the content of the intent\n    name: content\n    type: STRING\n  name: hsbc_topic_for_intent\n  type: VECTOR_STORE\n- description: a faq about general questions, must check this first to see if any\n    question can be answered by this faq\n  fields:\n  - description: the confidence of the search result\n    name: meta__score\n    type: FLOAT\n  - description: the content of the intent\n    name: content\n    type: STRING\n  - description: ''\n    name: topics\n    type: LIST\n  name: faq\n  type: VECTOR_STORE\n- description: counterparty bank checking system which contains all the counterpart\n    banks info\n  fields:\n  - description: Country in which the Counterparty Bank is located\n    name: country\n    type: STRING\n  - description: Country Code of the country in which the Counterparty bank is located\n    name: country_code\n    type: STRING\n  - description: Legal Entity Name of the Counterparty Bank\n    name: entity_name\n    type: STRING\n  - description: SWIFT/BIC address of the Counterparty Bank\n    name: swift\n    type: STRING\n  - description: 4-digit internal identifier for the Counterparty Bank\n    name: cbid\n    type: STRING\n  - description: Internal identifier for the Counterparty Bank in a specific location\n    name: cbid_at_country_level\n    type: STRING\n  - description: Internal classification of the type of relationship HSBC has with\n      the Counterparty Bank\n    name: current_counterparty_type\n    type: STRING\n  - description: Location where the Counterparty Bank is incorporated\n    name: ultimate_parent_country_of_incorporation\n    type: STRING\n  - description: Internal classification of the country risk in which the Counterparty\n      Bank is located\n    name: country_credit_classification\n    type: STRING\n  - description: Internal Credit Risk Rating for the Counterparty Bank. The smaller\n      the number, the better rated the bank\n    name: cpr\n    type: STRING\n  - description: confirmation or negotiation_credit_status\n    name: confirmation/negotiation_credit_status\n    type: STRING\n  - description: If the value is Yes or Trade only RMA or Sponsor or Not Sponsor,\n      then an RMA arrangement exists with HSBCSGSG\n    name: rma_with_hsbcsgsg\n    type: STRING\n  name: counterparty_bank\n  type: RDMS\n- description: WCS system contains companies info for benchmark data\n  fields:\n  - description: the confidence of the search result\n    name: _score\n    type: FLOAT\n  - description: the country of the product\n    name: company\n    type: STRING\n  - description: the date for the record\n    name: days\n    type: STRING\n  - description: DPO\n    name: dpo\n    type: INT\n  - description: DSO\n    name: dso\n    type: INT\n  - description: DIO\n    name: dio\n    type: INT\n  - description: CCC\n    name: ccc\n    type: INT\n  - description: DPO rank\n    name: dpo_rank\n    type: INT\n  - description: DSO rank\n    name: dso_rank\n    type: INT\n  - description: DIO rank\n    name: dio_rank\n    type: INT\n  - description: CCC rank\n    name: ccc_rank\n    type: INT\n  name: wcs\n  type: RDMS\n- description: gps_product contains all the gps related products information\n  fields:\n  - description: \"the region of the gps product\\uFF0C for example Asia Pacific\"\n    name: region\n    type: STRING\n  - description: Country in which the product is belonged\n    name: country\n    type: STRING\n  - description: the provider of the product\n    name: product_provider\n    type: STRING\n  - description: ''\n    name: product_family\n    type: STRING\n  - description: ''\n    name: product_sub_family\n    type: STRING\n  - description: the global name of the product\n    name: globalname\n    type: STRING\n  - description: the old global name of the product\n    name: oldglobalname\n    type: STRING\n  - description: the product name in local\n    name: localname\n    type: STRING\n  - description: the old product name in local\n    name: oldlocalname\n    type: STRING\n  - description: ''\n    name: complexity\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_bb_non_rm\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_bb_rm\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_mme\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_lc\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_mc\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_fi\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_nbfi\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_af\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_ps\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_rbb\n    type: STRING\n  - description: the sold status, the value can be Sold Onshore or Not Sold or Still\n      Sold or Referral Only or Withdrawn or Legacy\n    name: seg_gpb\n    type: STRING\n  name: gps_product\n  type: RDMS\n"},
         "template": "# ROLE\n\nyour ROLE is a knowledge base manager, user will assign you some tasks, and your ONLY job is to pick the possible search\ntools to search the knowledge, USER WILL PROVIDE YOU THE SEARCHING RESULT.\n\n# Result Format\n\n{\"tool_calls\": [\n{\n\"type\": \"function\", // fixed\n\"function\": {\n    \"name\": \"tool name\", // name in SEARCH_TOOLS; ONLY THING YOU SHOULD FILL\n}]}\n\n# SEARCH_TOOLS:\n\n```yaml\n{{ search_tools }}\n```\n\n# CHAT FLOW\n\n```plantuml\n@startuml\nstart\n:I provide the task;\nif (you find some search tools can be used to supplement more infos) then (yes)\n:You pick up the search tools and ask ME to do the real search, and your reply should start with \"[SEARCH]\", then your reply should be JSON format with the search tools;\nelse(no)\n:You reply the \"[FAILED]\" provide the reason;\nendif\n@enduml\n```\n\n# EXAMPLES:\n\nI: I want to know the price of TTBBB product\nYOU: [SEARCH]{\"tool_calls\": [{\"type\": \"function\", \"function\": {\"name\": \"TTBBB_system\"}}]}\n\n# INSTRUCTION\n\nplease FOLLOW the CHAT FLOW and chat with user.\n"},
        {"role": "user", "kwargs": {},
         "template": "## User input:\nThe user initially asked if the offered unit price of SGD 0.01 for the AC@H payment in Singapore was compliant with the standard pricing. The assistant informed the user that the standard pricing is SGD 0.2 per transaction, so the offered price was not compliant. The user then asked about increasing the offered unit price to SGD 0.3.\n\n## ATTENTION\n1. offered unit rate should not be a query field\n2. fields to be queried: {\"country\": \"Singapore\", \"product group\": \"Payments\", \"product\": \"AC@H payment\", \"charge currency\": \"SGD\"}"}]

    params = {"top_p": 0.7, "jsonable": False, "max_length": 1024, "temperature": 0.0, "presence_penalty": 0.0,
              "repetition_penalty": 0.0}

    output = "The user initially asked if the offered unit price of SGD 0.01 for the AC@H payment in Singapore was compliant with the standard pricing. The assistant informed the user that the standard pricing is SGD 0.2 per transaction, so the offered price was not compliant. The user then asked about increasing the offered unit price to SGD 0.3."

    scenario = "gpt-4"
    generate_one_unit_test("price_checking_13", data_list, params, output, scenario)
